# GeeksforGeeks (Easy)

# Given two strings s1 and s2 consisting of lowercase characters. 
# The task is to check whether two given strings are an anagram of each other or not. 
# An anagram of a string is another string that contains the same characters, only the order of characters can be different. 
# For example, "act" and "tac" are an anagram of each other. 
# Strings s1 and s2 can only contain lowercase alphabets.
# Note: You can assume both the strings s1 & s2 are non-empty.

# Expected Complexities
# Time Complexity: O(n + m)
# Auxiliary Space: O(1)

# Java Code :

class Solution {
    // Function is to check whether two strings are anagram of each other or not.
    public static boolean areAnagrams(String s1, String s2) {

        // Your code here
        if(s1.length() != s2.length()) return false;
        boolean flag = true;
        HashMap<Character,Integer> h = new HashMap<>();
        for(int i = 0; i<s1.length();i++){
            h.put(s1.charAt(i),h.getOrDefault(s1.charAt(i),0) + 1);
            h.put(s2.charAt(i),h.getOrDefault(s2.charAt(i),0) - 1);
        }
        for(int i : h.values()){
            if(i>=1) flag = false;
        }
        return flag;
    }
}
