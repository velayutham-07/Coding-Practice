# LeetCode 2071 (Hard)

# You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. 
# The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. 
# Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).
# Additionally, you have pills magical pills that will increase a worker's strength by strength. 
# You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

# Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

# Java Code :

class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {

        int m = tasks.length, n = workers.length;
        Arrays.sort(tasks);
        Arrays.sort(workers);

        int l = 0, r = Math.min(m, n);
        while(l <= r){
            int mid = l + r >> 1;
            if(check(tasks, workers, pills, strength, mid, n - mid))
                l = mid+1;
            else
                r = mid-1;
        }

        return r;
    }
    
    public boolean check(int[] tasks, int[] workers, int pills, int strength, int mid, int start){
        
        int[] que = new int[mid];
        int write = 0, read = 0; 

        for(int i = 0, j = 0; i < mid; i++){
            int curStrength  = workers[start + i];
            if(read == write){

                if(curStrength >= tasks[j]){
                    j++;
                    continue;
                }

                if(pills == 0)
                    return false;
                
                curStrength  += strength;
                pills--;

                while(j < mid && curStrength >= tasks[j])
                    que[write++] = tasks[j++];
                
                if(read == write)
                    return false;
                write--;
                
            }else{

                if(curStrength >= que[read]){
                    read++;
                    continue;
                }

                if(pills == 0)
                    return false;
                
                curStrength  += strength;
                pills--;

                while(j < mid && curStrength >= tasks[j])
                    que[write++] = tasks[j++];
                
                write--;
            }
        }

        return read == write;        
    }
}
